<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
text = "Pause"; //The pause screen message.
text_font = -1; //Default GameMaker font is -1, else set a custom font here.
text_color = c_white; //The color of the message.
text_alpha = 1; //The alpha of the message.
rec_padding = 32; //The extra padding around the colored rectangle.
rec_color = c_black; //The color of the rectangle.
rec_alpha = 0.7; //The alpha of the rectangle.
unpause_key = vk_space; //Key for un-pausing.

active_list = -1; //List containing which objects where active before the pause started.

/*
 We want to know the width and height of our game, and if we are not
 using views, this will simply be the room size.
 However, if we are using views, we need to loop through the views
 and figure out the actual width. We cannot simply use window width
 and height, since this will not work properly with fullscreen.
*/
w = room_width;
h = room_height;

if view_enabled {
 var __ww = 0, __hh = 0;
 for (var i=0;i&lt;8;i++){
  if view_visible[i] == true {
   __ww = max(__ww,view_xport[i]+view_wport[i]);
   __hh = max(__hh,view_yport[i]+view_hport[i]);
  }
 }
 w = __ww;
 h = __hh;
}

//We want to make all our foregrounds invisible, or else they will be drawn on top of the pause screen.
back_visibility = 0;
back_hspd = 0;
back_vspd = 0;
for(i=0;i&lt;8;i++){
 back_visibility[i] = background_visible[i];
 if background_foreground[i] {
  background_visible[i] = false;
 }
 
 back_hspd[i] = background_hspeed[i];
 back_vspd[i] = background_vspeed[i];
 background_hspeed[i] = 0;
 background_vspeed[i] = 0;
}

/*
 If we are using views, we need to make only view 0 visible, and 
 rescale it to fit the window. Because of this, we need to store the 
 old values of the view, and which other views was visible.
*/
view_visibility = 0;
if view_enabled {
 for (var i=0;i&lt;8;i++){
  view_visibility[i] = view_visible[i];
  view_visible[i] = false;
 }
 view_visible[0] = true;
 
 //Old view size
 view_x = view_xview[0];
 view_y = view_yview[0];
 view_w = view_wview[0];
 view_h = view_hview[0];
 
 view_xview[0] = 0;
 view_yview[0] = 0;
 view_wview[0] = w;
 view_hview[0] = h;
 
 //Old port size
 port_x = view_xport[0];
 port_y = view_yport[0];
 port_w = view_wport[0];
 port_h = view_hport[0];
 
 view_xport[0] = 0;
 view_yport[0] = 0;
 view_wport[0] = w;
 view_hport[0] = h;
}

/*
 If the application surface is enabled, we create a screenshot sprite
 from this surface. If not then we need to do it the slower way, taking
 an actual screenshot, and loading it in as a sprite.
 
 In case of a window larger than the game, we need to know the position 
 of the actual game on screen (if application surface is not on).
*/
if application_surface_is_enabled() {
 sprite_index = sprite_create_from_surface(application_surface,0,0,surface_get_width(application_surface),surface_get_height(application_surface),false,false,0,0);
} else {
 screen_save(working_directory+"tempScreen.png");
 sprite_index = sprite_add(working_directory+"tempScreen.png",0,false,false,0,0);
 file_delete(working_directory+"tempScreen.png");
}

/*
 Down here you can create objects, in case you want a pause menu or
 something like that. The objects will automatically be destroyed 
 when the pause is terminated.
 
 For an example, try un-commenting the code below:
*/

//Create pause menu objects down here!
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up
//We destroy our sprite again, since it is not needed any more.
sprite_delete(sprite_index);

//If pausing a 3D game we need to turn d3d back on.
if d3d_is_on {
 d3d_start();
}

//Re-do the views
if is_array(view_visibility) {
 for(var i=0;i&lt;8;i++){
  view_visible[i] = view_visibility[i];
 }
 view_xview[0] = view_x;
 view_yview[0] = view_y;
 view_wview[0] = view_w;
 view_hview[0] = view_h;
 
 view_xport[0] = port_x;
 view_yport[0] = port_y;
 view_wport[0] = port_w;
 view_hport[0] = port_h;
}

//Enables our foreground images again..
for(i=0;i&lt;8;i++){
 background_visible[i] = back_visibility[i];
 background_hspeed[i] = back_hspd[i];
 background_vspeed[i] = back_vspd[i];
}

//..destroy any existing instances.. (explained below)
for(var i=0;i&lt;instance_count;i++){
 with instance_id[i] {
  instance_destroy();
 }
}

//..and re-activate the before active objects again!
for(var i=0;i&lt;ds_list_size(active_list);i++){
 instance_activate_object(ds_list_find_value(active_list,i));
}

//And free the list from memory.
ds_list_destroy(active_list);

/*
 WHY DESTROYING INSTANCES? ONLY THIS ONE EXISTS?
 Well, this is in case you want to have a menu on the pause screen. Or
 something similar. Any object you create after using game_pause() (for
 example in the pause create event, where I have planted an extra 
 example) will not be deactivated, and can thus be used as menu elements.
 
 Try un-commenting the example code in the create event.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Un-pause
//If our chosen un-pause key is pressed, we stop the pause by destroying this object!
if keyboard_check_pressed(unpause_key) {
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Un-pause before changing room
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the pause
//First we draw our screenshot..
draw_sprite_stretched(sprite_index,image_index,0,0,w,h);

//..Then our text! We make sure our text is centered on the screen.
draw_set_font(text_font);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

var text_w = string_width(text), text_h = string_height(text);
//First thing we draw is the background rectangle. You can edit it to draw any shape you want - here I use a simple rectangle, because I think it looks nice.
draw_set_color(rec_color);
draw_set_alpha(rec_alpha);
draw_rectangle(floor(w/2)-floor(text_w/2)-rec_padding,floor(h/2)-floor(text_h/2)-rec_padding,floor(w/2)+ceil(text_w/2)+rec_padding,floor(h/2)+ceil(text_h/2)+rec_padding,false); //While drawing I am using floor and ceil to round and make sure, that everything looks as it should.

//Then we can draw the text.
draw_set_color(text_color);
draw_set_alpha(text_alpha);
draw_text(floor(w/2)-floor(text_w/2),floor(h/2)-floor(text_h/2),text);

//..And always remember to reset the alpha:
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
